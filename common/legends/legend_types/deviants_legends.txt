sexual = {
	color = { 128 128 128 }
	on_start = {
		mark_historical_legend_as_done = yes
		legend_protagonist = {
			add_dead_character_flag = {
				flag = ignore_sickness_clothes
				years = 400
			}
		}
	}
	on_province_spread = {
		if = {
			limit = {
				county.holder = {
					is_ai = no
					OR = {
						NOT = { has_variable = legend_alerted_var }
						AND = {
							has_variable = legend_alerted_var
							NOT = {
								var:legend_alerted_var = scope:legend
							}
						}
					}
				}
				scope:legend.legend_owner = {
					NOT = { this = prev.county.holder }
				}
			}
			if = {
				limit = {
					scope:legend = { legend_quality = famed }
				}
				send_interface_message_legend_notification_effect = yes
			}
			else = { # If it's a high level one we send a toast
				send_interface_toast_legend_notification_effect = yes
			}
		}
	}
	
	on_legend_stop_promote = {
		# If you were asked money to promote a legend and you drop it you get called out
		if = {
			limit = {
				scope:legend = {
					is_target_in_variable_list = {
						name = accepted_promote_legend_var
						target = root #former promoter
					}
				}
			}
			trigger_event = {
				id = legend_events.1000
				days = { 1 3 }
			}
		}
	}

	is_valid_protagonist = {
		age >= 16
	}

	ai_protagonist_weight = {
		base = 0
				if = { # More likely to choose yourself
			limit = {
				this = scope:creator
			}
			add = 10
		}
		if = {
			limit = {
				is_parent_of = scope:creator
				is_alive = no
			}
			add = 8
		}
		if = {
			limit = {
				is_primary_heir_of = scope:creator
			}
			add = 10
		}
		if = {
			limit = {
				is_spouse_of = scope:creator
				has_relation_soulmate = scope:creator
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_character_modifier = deviants_prostitute
					has_trait = deviants_lesser_succubus
				}
			}
			add = 1
		}
	}
	quality = {
		famed = {
			spread_chance = {
				if = {
					limit = {
						exists = scope:legend.legend_owner
					}
					value = spread_chance_legends_default_value
					multiply = spread_chance_legends_mult_value
				}
				else = {
					value = 0
				}
			}

			max_provinces = 100

			creation_cost = {
				gold = legend_base_cost
				prestige = minor_prestige_value
			}

			owner_cost = {
				round = no
				gold = famed_legend_owner_cost
			}
			
			promoter_cost = {
				round = no
				gold = famed_legend_promoter_cost
			}
			
			upgrade_cost = {
				gold = legend_upgrade_cost
				prestige = legend_prestige_cost
			}

			removal_duration = {
				years = { 25 35 }
			}

			impact = {
				province_modifier = {
					county_opinion_add = 5
					development_growth_factor = 0.01
				}
				owner_modifier = {
					monthly_dynasty_prestige = 0.1
					monthly_dynasty_prestige_mult = 0.05
				}
				promoter_modifier = {
					monthly_dynasty_prestige = 0.01
					stewardship = 1
				}
				
				# Effect run when a legend is completed
				# root = the owner
				on_complete = {
					promoted_legend ?= { save_scope_as = promoted_legend } #For the ending event loc
					scope:protagonist = { save_scope_as = legend_protagonist }
					remove_legend_notification_variables_effect = yes
					if = {
						limit = {
							exists = scope:title
							scope:title.tier < tier_duchy
						}
						scope:title.duchy = { save_scope_as = title_claim }
					}
					else_if = {
						limit = {
							exists = scope:title
						}
						scope:title = { save_scope_as = title_claim }
					}
					give_legendary_building_legitimizing_tooltip_effect = yes
					legend_ending_rewards_legitimizing_effect = yes
					legend_ending_rewards_famed_legitimizing_effect = yes
					legend_ending_achievements_effect = yes
					trigger_event = story_event_legends.0002
					
					#balancing_legend_global_var_effect = yes # Left for testing purposes
				}
			}
			ai_chance = {
				# root = character with the legend seed
				create = {
					value = legitimizing_legend_create_ai
				}

				# root = character who can promote
				# scope:legend = the legend to promote
				promote = {
					value = base_legend_promote_ai
					if = {
						limit = {
							ai_has_economical_boom_personality = yes
						}
						multiply = 1.2
					}
				}
				
				# root = character who can take a legend
				# scope:legend = the legend to take ownership
				take_unowned = 100

				# root = legend owner
				# scope:legend = the legend
				upgrade = {
					value = 1000 # Always upgrade when you can
				}

				# root = legend owner
				# scope:legend = the legend
				complete = {
					value = base_legend_complete_ai
				}
			}
		}
		
		illustrious = {
			spread_chance = {
				if = {
					limit = {
						exists = scope:legend.legend_owner
					}
					value = spread_chance_legends_default_value
					multiply = spread_chance_legends_mult_value
				}
				else = {
					value = 0
				}
			}

			max_provinces = 300
			
			creation_cost = {
				gold = {
					value = legend_base_cost
					multiply = 1.5
				}
				prestige = medium_prestige_value
			}

			owner_cost = {
				round = no
				gold = illustrious_legend_owner_cost
			}
			
			promoter_cost = {
				round = no
				gold = illustrious_legend_promoter_cost
			}
			
			upgrade_cost = {
				gold = legend_upgrade_cost
				prestige = legend_prestige_cost
			}

			removal_duration = {
				years = { 50 70 }
			}

			impact = {
				province_modifier = {
					county_opinion_add = 10
					development_growth_factor = 0.02
				}
				owner_modifier = {
					monthly_dynasty_prestige = 0.25
					monthly_dynasty_prestige_mult = 0.1
				}
				promoter_modifier = {
					monthly_dynasty_prestige = 0.04
					stewardship = 2
				}
				
				# Effect run when a legend is completed
				# root = the owner
				on_complete = {
					promoted_legend ?= { save_scope_as = promoted_legend } #For the ending event loc
					scope:protagonist = { save_scope_as = legend_protagonist }
					remove_legend_notification_variables_effect = yes
					custom_tooltip = {
						text = unlock_legendary_integration_d_tt
						add_character_flag = legendary_integration_d
					}
					if = {
						limit = {
							exists = scope:title
							scope:title.tier < tier_kingdom
						}
						scope:title.kingdom = { save_scope_as = title_claim }
					}
					else_if = {
						limit = {
							exists = scope:title
						}
						scope:title = { save_scope_as = title_claim }
					}
					give_legendary_building_legitimizing_tooltip_effect = yes
					legend_ending_rewards_legitimizing_effect = yes
					legend_ending_rewards_illustrious_legitimizing_effect = yes
					legend_ending_achievements_effect = yes
					trigger_event = story_event_legends.0002
					
					#balancing_legend_global_var_effect = yes # Left for testing purposes
				}
			}
			ai_chance = {
				# root = character with the legend seed
				create = {
					value = legitimizing_legend_create_ai
					add = illustrious_legend_create_ai
				}

				# root = character who can promote
				# scope:legend = the legend to promote
				promote = {
					value = base_legend_promote_ai
					if = {
						limit = {
							ai_has_economical_boom_personality = yes
						}
						multiply = 1.2
					}
				}
				
				# root = character who can take a legend
				# scope:legend = the legend to take ownership
				take_unowned = 100

				# root = legend owner
				# scope:legend = the legend
				upgrade = {
					value = 1000 # Always upgrade when you can
				}

				# root = legend owner
				# scope:legend = the legend
				complete = {
					value = base_legend_complete_ai
				}
			}
		}
		
		mythical = {
			spread_chance = {
				if = {
					limit = {
						exists = scope:legend.legend_owner
					}
					value = spread_chance_legends_default_value
					multiply = spread_chance_legends_mult_value
				}
				else = {
					value = 0
				}
			}

			max_provinces = 500
			
			creation_cost = {
				gold = {
					value = legend_base_cost
					multiply = 2
				}
				prestige = {
					value = medium_prestige_value
					multiply = 1.5
				}
			}

			owner_cost = {
				round = no
				gold = mythical_legend_owner_cost
			}
			
			promoter_cost = {
				round = no
				gold = mythical_legend_promoter_cost
			}

			upgrade_cost = {
				gold = {
					value = {
						value = legend_upgrade_cost
						multiply = 2
					}
				}
				prestige = legend_prestige_cost
			}

			removal_duration = {
				years = { 75 100 }
			}

			impact = {
				province_modifier = {
					county_opinion_add = 20
					development_growth_factor = 0.06
				}
				owner_modifier = {
					monthly_dynasty_prestige = 0.5
					monthly_dynasty_prestige_mult = 0.2
				}
				promoter_modifier = {
					monthly_dynasty_prestige = 0.1
					stewardship = 4
				}
				# Effect run when a legend is completed
				# root = the owner
				on_complete = {
					promoted_legend ?= { save_scope_as = promoted_legend } #For the ending event loc
					scope:protagonist = { save_scope_as = legend_protagonist }
					remove_legend_notification_variables_effect = yes
					custom_tooltip = {
						text = unlock_legendary_integration_k_tt
						add_character_flag = legendary_integration_k
					}
					if = {
						limit = {
							exists = scope:title
							scope:title.tier < tier_empire
						}
						scope:title.empire = { save_scope_as = title_claim }
					}
					else_if = {
						limit = {
							exists = scope:title
						}
						scope:title = { save_scope_as = title_claim }
					}
					if = {
						limit = {
							exists = scope:culture
						}
						set_variable = {
							name = legendary_culture
							value = scope:culture
						}
						scope:culture = { save_scope_as = legendary_culture }
					}
					give_legendary_building_mythical_legitimizing_tooltip_effect = yes
					legend_ending_rewards_legitimizing_effect = yes
					legend_ending_rewards_mythical_legitimizing_effect = yes
					legend_ending_achievements_effect = yes
					trigger_event = story_event_legends.0002
					
					#balancing_legend_global_var_effect = yes # Left for testing purposes
				}
			}
			ai_chance = {
				# root = character with the legend seed
				create = {
					value = legitimizing_legend_create_ai
					add = mythical_legend_create_ai
				}

				# root = character who can promote
				# scope:legend = the legend to promote
				promote = {
					value = base_legend_promote_ai
					if = {
						limit = {
							ai_has_economical_boom_personality = yes
						}
						multiply = 1.2
					}
				}
				
				# root = character who can take a legend
				# scope:legend = the legend to take ownership
				take_unowned = 100

				# root = legend owner
				# scope:legend = the legend
				upgrade = {
					value = 1000 # Always upgrade when you can
				}

				# root = legend owner
				# scope:legend = the legend
				complete = {
					value = base_legend_complete_ai
				}
			}
		}
	}
	
	on_yearly = {
		scope:legend = { 
			save_scope_as = promoted_legend
			if = {
				limit = { has_legend_chronicle = semen_tank }
				if = {
					limit = { has_legend_chapter = opening }
					legend_owner = { trigger_event = deviants_blackmail.1100 }
				}
				else_if = {
					limit = { has_legend_chapter = mind_break }
					legend_owner = { trigger_event = deviants_blackmail.1200 }
				}
				else_if = {
					limit = { has_legend_chapter = toy }
					legend_owner = { trigger_event = deviants_blackmail.1300 }
				}
				else_if = {
					limit = { has_legend_chapter = conclusion }
					legend_owner = {
						if = {
							limit = { is_married = no }
							trigger_event = deviants_blackmail.1400
						}
						else = { trigger_event = deviants_blackmail.2000 }
					}
				}
			}
		}
	}
}
